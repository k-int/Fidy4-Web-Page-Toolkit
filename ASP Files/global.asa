<SCRIPT LANGUAGE="VBScript" RUNAT="Server">

Server.ScriptTimeout = 200

Sub Application_OnStart


'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
''''  ENTER YOUR APIKEY, PATH TO TEMPLATES FOLDER AND ERROR PAGE HERE  ''''
Application("apikey") = ""
Application("xslRootPath") = "templates_xsl/"
Application("four0fourPage") = "custom404.html"
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Application("root") = "https://<aggregator_instance_in_here>"

Application("langList") = readFile(Application.Value("root") & "/terminology/vocabs/"&langList&"/topterms")
Application("accessChannelsList") = readFile(Application.Value("root") & "/terminology/vocabs/"&accessChannelsList&"/topterms")
Application("referralList") = readFile(Application.Value("root") & "/terminology/vocabs/"&referralList&"/topterms")
Application("topCatsList") = readFile(Application.Value("root") & "/terminology/vocabs/"&topCatsList&"/topterms")
Application("fullCatsList") = loadAllCats()

End Sub


    ' Define the id number of each controlled list (this allows a url to be built to retrieve the list)
    Dim langList, accreditList, facilityList, ppaList, qualityList, referralList, rolesList, spLevelsList, accessChannelsList, topCatsList
    langList = 10               ' Language list (ISO 639-1)
    accreditList = 1           ' Accredidation list (Accreditation-1.0)
    facilityList = 4          ' Facility Terms list 	(Facility 1.0)
    ppaList = 6               ' Provision of Positive Activities 	(PPAYP-1.0)
    qualityList = 7           ' Quality Assurance List 	(QualityAssurance-1.0)
    referralList = 8          ' ReferralCriteria Terms List 	(ReferralCriteria 1.0)
    rolesList = 9             ' Role list 	(Role 1.0)
    spLevelsList = 2           ' Spatial Levels list 	(Spatial Levels 1.0)
    accessChannelsList = 5    ' Local Government Channels-Terms list 	(LGCHL-1.01)
    topCatsList = 11           ' PKH Mapped Vocabulary Version Ph3FINALV2 	(ISPP-001a-M)


    Function loadAllCats()
    
    Set allCategories = makeDoc(allCategories)
    allCategories.async = false
    allCategories.preserveWhiteSpace = True
    allCategories.setProperty "ServerHTTPRequest", true

    allCategories.loadXML(Application.Value("topCatsList"))
    
    ' Make a clone of the doc to avoid changing the node list WHILE iterating through it
    Set clone = makeDoc(clone)
    clone.async = false
    clone.preserveWhiteSpace = True
    clone.setProperty "ServerHTTPRequest", true
    clone.loadXML(allCategories.documentElement.xml)
    Set level1IDs = clone.getElementsByTagName("internalId")
    
    For Each level1ID In level1IDs
        subcatPath = Application.Value("root") & "/terminology/term/" & level1ID.text + "/children"
        
        Set vocab = makeDoc(vocab)
        vocab.async = false
        vocab.preserveWhiteSpace = True
        vocab.setProperty "ServerHTTPRequest", true
        vocab.loadXML(readFile(subcatPath))
        ' Identify the node in the original doc to hold data
        Set termParent = allCategories.selectSingleNode("topTerms/term[internalId = " & level1ID.text & "]")

        ' add data
        Set vocabTree = vocab.documentElement
        termParent.appendChild(vocabTree.cloneNode(true))

        ' Now get the 2nd-level category IDs
        Set level2IDs = vocab.getElementsByTagName("internalId")

        For Each level2ID In level2IDs
            sub2catPath = Application.Value("root") & "/terminology/term/" & level2ID.text & "/children"
            Set vocab2 = makeDoc(vocab2)
            vocab2.async = false
            vocab2.preserveWhiteSpace = True
            vocab2.setProperty "ServerHTTPRequest", true

            ' Check if there are any 3rd-level categories
            sub2catXML = readFile(sub2catPath)
            If ("" <> sub2catXML) Then
                vocab2.loadXml(sub2catXML)
                ' Identify the node in the original doc to hold data
                Set term2Parent = allCategories.SelectSingleNode("topTerms/term[internalId = " & level1ID.text & "]/termChildren/term[internalId = " & level2ID.text & "]")

                ' add data
                Set vocab2Tree = vocab2.documentElement
                term2Parent.appendChild(vocab2Tree.cloneNode(true))
            End If
        Next    
    Next
    
    loadAllCats = allCategories.documentElement.xml
    
    End Function
    
    
    Function readFile(url)
    
    ' Create an XMLHTTP object to read the XML of the list as text
        Dim xmlHTTP, sHTMLPage
        Set xmlHTTP = CreateObject("MSXML2.ServerXMLHTTP")
        xmlHTTP.Open "GET", url, False
        xmlHTTP.Send ' send it (to the web, wait for result)
        sHTMLPage = xmlHTTP.responseText

    ' Create a Stream object to convert this text to ASCII
        Set TextStream = CreateObject("ADODB.Stream")
        TextStream.CharSet = "ASCII"
        TextStream.Open()
        TextStream.WriteText sHTMLPage
        TextStream.Position = 0
        newText = TextStream.ReadText
        TextStream.Close()
        
    ' Return the text
        readFile = newText
        
    End Function
    
    
    Function makeDoc(docName)
    
        On Error Resume Next
        Set docName = Server.CreateObject("xMSXML2.DOMDocument.6.0")
        If (0 <> Err.number) Then
            Set docName = Server.CreateObject("MSXML2.DOMDocument.3.0")
        End If
		
        Set makeDoc = docName        
    
    End Function
 

</SCRIPT>